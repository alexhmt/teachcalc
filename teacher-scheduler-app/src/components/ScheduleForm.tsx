import React, { useState, useEffect } from 'react'; // Added useEffect
import { useScheduler } from '../context/SchedulerContext';
import { ScheduledClass } from '../types';
import { set, addHours, setDay as dfnsSetDay, getDay as dfnsGetDay, format as dfnsFormat, parseISO } from 'date-fns'; // Added getDay, format, parseISO

const DAYS_OF_WEEK_OPTIONS = [
  { value: 1, label: 'Понедельник' }, { value: 2, label: 'Вторник' }, { value: 3, label: 'Среда' },
  { value: 4, label: 'Четверг' }, { value: 5, label: 'Пятница' }, { value: 6, label: 'Суббота' },
  { value: 0, label: 'Воскресенье' },
];

const TIME_SLOTS_OPTIONS = Array.from({ length: 13 }, (_, i) => {
  const hour = i + 8;
  return `${String(hour).padStart(2, '0')}:00`;
});

interface ScheduleFormProps {
  editingClass: ScheduledClass | null;
  onFormClose: () => void; // To close the form or reset editing state
}

const ScheduleForm: React.FC<ScheduleFormProps> = ({ editingClass, onFormClose }) => {
  const { teachers, groups, students, addScheduledClass, updateScheduledClass } = useScheduler();

  const [selectedTeacherId, setSelectedTeacherId] = useState<string>('');
  const [classType, setClassType] = useState<'group' | 'individual'>('group');
  const [selectedGroupId, setSelectedGroupId] = useState<string>('');
  const [selectedStudentId, setSelectedStudentId] = useState<string>('');
  const [selectedDay, setSelectedDay] = useState<number>(1); // Default Monday
  const [selectedTime, setSelectedTime] = useState<string>(TIME_SLOTS_OPTIONS[0]); // Default 08:00

  const isEditMode = !!editingClass;

  useEffect(() => {
    if (editingClass) {
      const startTime = typeof editingClass.startTime === 'string' ? parseISO(editingClass.startTime) : editingClass.startTime;

      setSelectedTeacherId(editingClass.teacherId);

      if (editingClass.groupId) {
        setClassType('group');
        setSelectedGroupId(editingClass.groupId);
        setSelectedStudentId('');
      } else if (editingClass.studentId) {
        setClassType('individual');
        setSelectedStudentId(editingClass.studentId);
        setSelectedGroupId('');
      }

      // date-fns getDay(): Sunday is 0, Monday is 1. This matches our DAYS_OF_WEEK_OPTIONS values.
      setSelectedDay(dfnsGetDay(startTime));
      setSelectedTime(dfnsFormat(startTime, 'HH:mm'));
    } else {
      // Reset form when not in edit mode or editingClass is cleared
      setSelectedTeacherId('');
      setClassType('group');
      setSelectedGroupId('');
      setSelectedStudentId('');
      setSelectedDay(1); // Default Monday
      setSelectedTime(TIME_SLOTS_OPTIONS[0]); // Default 08:00
    }
  }, [editingClass]);

  // Filter groups by selected teacher
  const filteredGroups = selectedTeacherId
    ? groups.filter(group => group.teacherId === selectedTeacherId)
    : groups;

  // Reset selected group if it doesn't belong to the newly selected teacher
  useEffect(() => {
    if (selectedTeacherId && selectedGroupId) {
      const selectedGroup = groups.find(g => g.id === selectedGroupId);
      if (selectedGroup && selectedGroup.teacherId !== selectedTeacherId) {
        setSelectedGroupId('');
      }
    }
  }, [selectedTeacherId, selectedGroupId, groups]);

  const handleSubmit = (event: React.FormEvent) => {
    event.preventDefault();

    // Validation
    if (!selectedTeacherId) {
      alert('Пожалуйста, выберите преподавателя.');
      return;
    }
    if (classType === 'group' && !selectedGroupId) {
      alert('Пожалуйста, выберите группу.');
      return;
    }
    if (classType === 'individual' && !selectedStudentId) {
      alert('Пожалуйста, выберите студента.');
      return;
    }

    let baseDate = new Date(); // Base for creating new date
    if (isEditMode && editingClass) {
        // Preserve original date when editing, only change day/time if they are different
        baseDate = typeof editingClass.startTime === 'string' ? parseISO(editingClass.startTime) : editingClass.startTime;
    }

    let newStartTime = dfnsSetDay(baseDate, selectedDay, { weekStartsOn: 1 });
    const [hour, minute] = selectedTime.split(':').map(Number);
    newStartTime = set(newStartTime, { hours: hour, minutes: minute, seconds: 0, milliseconds: 0 });
    const newEndTime = addHours(newStartTime, 1);

    if (isEditMode && editingClass) {
      const updatedClassData: ScheduledClass = {
        ...editingClass,
        teacherId: selectedTeacherId,
        groupId: classType === 'group' ? selectedGroupId : undefined,
        studentId: classType === 'individual' ? selectedStudentId : undefined,
        startTime: newStartTime,
        endTime: newEndTime,
      };
      updateScheduledClass(updatedClassData);
    } else {
      // For new class, ID is generated by addScheduledClass in context
      const newClassData: Omit<ScheduledClass, 'id'> = {
        teacherId: selectedTeacherId,
        groupId: classType === 'group' ? selectedGroupId : undefined,
        studentId: classType === 'individual' ? selectedStudentId : undefined,
        startTime: newStartTime,
        endTime: newEndTime,
      };
      // Cast to any if addScheduledClass signature needs full ScheduledClass but handles ID itself
      addScheduledClass(newClassData as any);
    }
    onFormClose(); // Close form/reset editing state after submission
  };

  const formStyle: React.CSSProperties = { /* ... same styles ... */
    padding: '20px', border: '1px solid #ccc', borderRadius: '8px', marginBottom: '20px',
    display: 'flex', flexDirection: 'column', gap: '15px', maxWidth: '400px',
  };
  const selectStyle: React.CSSProperties = { /* ... same styles ... */
    padding: '10px', borderRadius: '4px', border: '1px solid #ddd', width: '100%'
  };
  const buttonStyle: React.CSSProperties = { /* ... same styles ... */
    padding: '10px 15px', borderRadius: '4px', border: 'none',
    backgroundColor: '#007bff', color: 'white', cursor: 'pointer', fontSize: '1em',
  };
   const cancelButtonStyle: React.CSSProperties = {
    ...buttonStyle,
    backgroundColor: '#6c757d', // A grey color for cancel
    marginTop: '10px',
  };


  return (
    <form onSubmit={handleSubmit} style={formStyle}>
      <h3>{isEditMode ? 'Редактировать занятие' : 'Создать занятие'}</h3>
      <div>
        <label htmlFor="teacher-select" style={{display: 'block', marginBottom: '5px'}}>Преподаватель:</label>
        <select id="teacher-select" value={selectedTeacherId} onChange={e => setSelectedTeacherId(e.target.value)} required style={selectStyle}>
          <option value="" disabled={isEditMode}>Выберите преподавателя</option>
          {teachers.map(teacher => <option key={teacher.id} value={teacher.id}>{teacher.name}</option>)}
        </select>
      </div>

      {/* Class Type Selection */}
      <div>
        <label style={{display: 'block', marginBottom: '5px'}}>Тип занятия:</label>
        <div style={{display: 'flex', gap: '15px'}}>
          <label style={{display: 'flex', alignItems: 'center', cursor: 'pointer'}}>
            <input
              type="radio"
              value="group"
              checked={classType === 'group'}
              onChange={e => setClassType(e.target.value as 'group' | 'individual')}
              style={{marginRight: '5px'}}
            />
            Групповое занятие
          </label>
          <label style={{display: 'flex', alignItems: 'center', cursor: 'pointer'}}>
            <input
              type="radio"
              value="individual"
              checked={classType === 'individual'}
              onChange={e => setClassType(e.target.value as 'group' | 'individual')}
              style={{marginRight: '5px'}}
            />
            Индивидуальное занятие
          </label>
        </div>
      </div>

      {/* Conditional: Group or Student Selection */}
      {classType === 'group' ? (
        <div>
          <label htmlFor="group-select" style={{display: 'block', marginBottom: '5px'}}>Группа:</label>
          <select id="group-select" value={selectedGroupId} onChange={e => setSelectedGroupId(e.target.value)} required style={selectStyle}>
            <option value="" disabled={isEditMode}>
              {selectedTeacherId ? 'Выберите группу' : 'Сначала выберите преподавателя'}
            </option>
            {filteredGroups.map(group => <option key={group.id} value={group.id}>{group.name}</option>)}
          </select>
        </div>
      ) : (
        <div>
          <label htmlFor="student-select" style={{display: 'block', marginBottom: '5px'}}>Студент:</label>
          <select id="student-select" value={selectedStudentId} onChange={e => setSelectedStudentId(e.target.value)} required style={selectStyle}>
            <option value="" disabled={isEditMode}>Выберите студента</option>
            {students.map(student => <option key={student.id} value={student.id}>{student.name}</option>)}
          </select>
        </div>
      )}

      <div>
        <label htmlFor="day-select" style={{display: 'block', marginBottom: '5px'}}>День недели:</label>
        <select id="day-select" value={selectedDay} onChange={e => setSelectedDay(parseInt(e.target.value, 10))} required style={selectStyle}>
          {DAYS_OF_WEEK_OPTIONS.map(day => <option key={day.value} value={day.value}>{day.label}</option>)}
        </select>
      </div>
      <div>
        <label htmlFor="time-select" style={{display: 'block', marginBottom: '5px'}}>Время:</label>
        <select id="time-select" value={selectedTime} onChange={e => setSelectedTime(e.target.value)} required style={selectStyle}>
          {TIME_SLOTS_OPTIONS.map(time => <option key={time} value={time}>{time}</option>)}
        </select>
      </div>
      <button type="submit" style={buttonStyle}>{isEditMode ? 'Обновить' : 'Создать'}</button>
      {isEditMode && (
        <button type="button" onClick={onFormClose} style={cancelButtonStyle}>
          Отменить
        </button>
      )}
    </form>
  );
};

export default ScheduleForm;
